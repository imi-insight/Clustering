# -*- coding: utf-8 -*-
"""ClusteringCode_AbhinavGoel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QkOzOVWit8k1KUhI7Gb5vVRKrLB85pSb
"""

#Clustering
#import required functions
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

#Load Dats
df = pd.read_csv("Clustering.csv")
df.head()

#EDA
df.info()
df.describe()
df[' brand'].value_counts()
df.columns
df = df.rename(columns=lambda x: x.strip())
df.isna().sum()
df['cubicinches'] = pd.to_numeric(df['cubicinches'], errors='coerce')
df['weightlbs'] = pd.to_numeric(df['weightlbs'], errors='coerce')
for column,content in df.items():
  if pd.isnull(content).sum():
    df[column] = content.fillna(content.median())
df['brand'] = df['brand'].map({' US.': 1 , ' Japan.': 2, ' Europe.' : 3})
df.corr()

#Detect Outliers
def detect_outliers(data):
  outliers = []
  threshold = 3
  mean = np.mean(data)
  std = np.std(data)
  for i in data:
    z_score = (i-mean)/std
    if np.abs(z_score) > threshold:
      outliers.append(i)
  return outliers

#Elbow method to get optimal number of clusters
ssd = []
for i in range(1,11):
    kmeans = KMeans(n_clusters=i,random_state=42)
    kmeans.fit(df)
    ssd.append(kmeans.inertia_)
plt.plot(range(1,11),ssd)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('SSD')
plt.show()

#Forming the clusters
kmeans = KMeans(n_clusters = 4, random_state= 42)
clusters_pred = kmeans.fit_predict(df)
clusters_pred
df['cluster'] = clusters_pred
centers = kmeans.cluster_centers_
centers

#Visualise the cluster
df0 = df[df.cluster == 0]
df1 = df[df.cluster == 1]
df2 = df[df.cluster == 2]
plt.scatter(df0['hp'],df0['cubicinches'],color='green')
plt.scatter(df1['hp'],df1['cubicinches'],color='red')
plt.scatter(df2['hp'],df2['cubicinches'],color='black')
